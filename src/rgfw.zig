const builtin = @import("builtin");

/// @brief Key codes and mouse icon enums
pub const RgfwKey = enum(u8) {
    rgfw_key_null = 0,
    rgfw_escape = '\x1b',
    rgfw_backtick = '`',
    rgfw_0 = '0',
    rgfw_1 = '1',
    rgfw_2 = '2',
    rgfw_3 = '3',
    rgfw_4 = '4',
    rgfw_5 = '5',
    rgfw_6 = '6',
    rgfw_7 = '7',
    rgfw_8 = '8',
    rgfw_9 = '9',
    rgfw_minus = '-',
    rgfw_equals = '=',
    rgfw_backspace = '\x08',
    rgfw_tab = '\t',
    rgfw_space = ' ',
    rgfw_a = 'a',
    rgfw_b = 'b',
    rgfw_c = 'c',
    rgfw_d = 'd',
    rgfw_e = 'e',
    rgfw_f = 'f',
    rgfw_g = 'g',
    rgfw_h = 'h',
    rgfw_i = 'i',
    rgfw_j = 'j',
    rgfw_k = 'k',
    rgfw_l = 'l',
    rgfw_m = 'm',
    rgfw_n = 'n',
    rgfw_o = 'o',
    rgfw_p = 'p',
    rgfw_q = 'q',
    rgfw_r = 'r',
    rgfw_s = 's',
    rgfw_t = 't',
    rgfw_u = 'u',
    rgfw_v = 'v',
    rgfw_w = 'w',
    rgfw_x = 'x',
    rgfw_y = 'y',
    rgfw_z = 'z',
    rgfw_period = '.',
    rgfw_comma = ',',
    rgfw_slash = '/',
    rgfw_bracket = '[',
    rgfw_close_bracket = ']',
    rgfw_semicolon = ';',
    rgfw_apostrophe = '\'',
    rgfw_back_slash = '\\',
    rgfw_return = '\n',
    rgfw_delete = '\x7F',
    rgfw_f1,
    rgfw_f2,
    rgfw_f3,
    rgfw_f4,
    rgfw_f5,
    rgfw_f6,
    rgfw_f7,
    rgfw_f8,
    rgfw_f9,
    rgfw_f10,
    rgfw_f11,
    rgfw_f12,
    rgfw_caps_lock,
    rgfw_shift_l,
    rgfw_control_l,
    rgfw_alt_l,
    rgfw_super_l,
    rgfw_shift_r,
    rgfw_control_r,
    rgfw_alt_r,
    rgfw_super_r,
    rgfw_up,
    rgfw_down,
    rgfw_left,
    rgfw_right,
    rgfw_insert,
    rgfw_end,
    rgfw_home,
    rgfw_page_up,
    rgfw_page_down,
    rgfw_num_lock,
    rgfw_kp_slash,
    rgfw_multiply,
    rgfw_kp_minus,
    rgfw_kp_1,
    rgfw_kp_2,
    rgfw_kp_3,
    rgfw_kp_4,
    rgfw_kp_5,
    rgfw_kp_6,
    rgfw_kp_7,
    rgfw_kp_8,
    rgfw_kp_9,
    rgfw_kp_0,
    rgfw_kp_period,
    rgfw_kp_return,
    rgfw_scroll_lock,
    rgfw_print_screen,
    rgfw_pause,
    rgfw_key_last,
};

/// @brief Basic vector type, if there's not already a point/vector type of choice.
pub const RgfwPoint = extern struct {
    x: i32,
    y: i32,
};

/// @brief Basic rect type, if there's not already a rect type of choice.
pub const RgfwRect = extern struct {
    x: i32,
    y: i32,
    w: i32,
    h: i32,
};

/// @brief Window structure for the window.
pub const RgfwWindow = extern struct {
    /// @brief Src window data.
    source: RgfwWindowSrc,
    /// @brief Ptr for usr data.
    user_ptr: *anyopaque,
    /// @brief Position and size of the window.
    r: RgfwRect,
    /// @brief Which key `rgfwWindowShouldClose` checks. Setting this to `rgfw_key_null` disables.
    /// the feature.
    exit_key: RgfwKey,
    /// @brief Last cursor point (for raw mouse data).
    _last_mouse_point: RgfwPoint,
};

/// @brief src window data
pub const RgfwWindowSrc = switch (builtin.os.tag) {
    .macos => struct { window: *anyopaque, view: *anyopaque },
    else => unreachable,
};
